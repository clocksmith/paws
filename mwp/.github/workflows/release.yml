name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - '@mcp-wp/*@*.*.*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run all checks
        run: |
          pnpm lint
          pnpm type-check
          pnpm test
          pnpm build

      - name: Extract package info
        id: package
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/@mcp-wp/([^@]+)@(.*)$ ]]; then
            PACKAGE_NAME="${BASH_REMATCH[1]}"
            VERSION="${BASH_REMATCH[2]}"
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v(.*)$ ]]; then
            PACKAGE_NAME="all"
            VERSION="${BASH_REMATCH[1]}"
          fi
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Publish to npm
        if: steps.package.outputs.package_name == 'all'
        run: pnpm publish -r --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish specific package to npm
        if: steps.package.outputs.package_name != 'all'
        run: |
          cd packages/*/${{ steps.package.outputs.package_name }}
          pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate changelog
        id: changelog
        run: |
          if command -v git-cliff &> /dev/null; then
            git-cliff --latest --strip all > RELEASE_CHANGELOG.md
          else
            echo "Recent changes in version ${{ steps.package.outputs.version }}" > RELEASE_CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_CHANGELOG.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE_CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.package.outputs.version, '-') }}
          files: |
            packages/**/dist/**/*.js
            packages/**/dist/**/*.d.ts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Discord
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "New Release: v${{ steps.package.outputs.version }}"
          description: |
            Package: ${{ steps.package.outputs.package_name }}
            Version: ${{ steps.package.outputs.version }}
            Released successfully!
          color: 0x00ff00
          username: MCP-WP Release Bot

      - name: Update documentation
        if: steps.package.outputs.package_name == 'all'
        run: |
          # Trigger documentation site rebuild
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"docs-rebuild"}'
